cfu_count <- read_csv("CFU_count.csv") %>%
drop_na() %>%
group_by(Time) %>%
mutate(Time_d = Time / 24,
cfumax = max(CFU),
cfumin = min(CFU),
Colonized = case_when(CFU > 50 ~1,
TRUE ~ 0))
### env setup
required_packages = c("dplyr", "data.table", "ggplot2", "readxl", "ggbeeswarm", "ggpubr", "EnvStats", "tidyverse", "patchwork", "ggforce", "wesanderson", "RcolorBrewer", "extrafont", "ggthemes" ,"egg", "scales", "ggh4x","grid")
need_install = required_packages[!(required_packages) %in% installed.packages()]
if (length(need_install) > 0){
install.packages((need_install))
}
# Load packages
lapply(required_packages, require, character.only=T)
dir_script = dirname(rstudioapi::getSourceEditorContext()$path)
setwd(dir_script)
#font_import()
#loadfonts(device="win")
cfu_count <- read_csv("CFU_count.csv") %>%
drop_na() %>%
group_by(Time) %>%
mutate(Time_d = Time / 24,
cfumax = max(CFU),
cfumin = min(CFU),
Colonized = case_when(CFU > 50 ~1,
TRUE ~ 0))
cfu_count <- read_excel("CFU_count.csv") %>%
drop_na() %>%
group_by(Time) %>%
mutate(Time_d = Time / 24,
cfumax = max(CFU),
cfumin = min(CFU),
Colonized = case_when(CFU > 50 ~1,
TRUE ~ 0))
cfu_count <- read_csv("CFU_count.csv", sep="\t") %>%
drop_na() %>%
group_by(Time) %>%
mutate(Time_d = Time / 24,
cfumax = max(CFU),
cfumin = min(CFU),
Colonized = case_when(CFU > 50 ~1,
TRUE ~ 0))
cfu_count <- fread("CFU_count.csv") %>%
drop_na() %>%
group_by(Time) %>%
mutate(Time_d = Time / 24,
cfumax = max(CFU),
cfumin = min(CFU),
Colonized = case_when(CFU > 50 ~1,
TRUE ~ 0))
cfu_count <- fread("CFU_count.csv") %>%
drop_na() %>%
group_by(Time) %>%
mutate(Time_d = Time / 24,
cfumax = max(CFU),
cfumin = min(CFU),
Colonized = case_when(CFU > 50 ~1,
TRUE ~ 0))
cfu_summary <- cfu_count %>%
group_by(Time) %>%
filter(Gut == "Ileum") %>%
summarise(avg = mean(CFU), stdev = sd(CFU), Colonization = sum(Colonized)/n()*100)
cfu_summary <- cfu_count %>%
group_by(Time) %>%
filter(Gut == "Ileum") %>%
summarise(avg = mean(CFU), stdev = sd(CFU), Colonization = sum(Colonized)/n()*100)
inoculum= cfu_count[cfu_count$Time!= 0, ]
setDT(cfu_count)
ggplot(cfu_count, aes(x = Time, y = CFU))+
stat_summary(data=cfu_count[Condition!="Inoculum"],fun=mean, geom="line", aes(group=Experiment), color = "gray", alpha=0.5, stroke =0)  +
stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="pointrange", color="gray", alpha=0.5 , stroke =0) +
geom_beeswarm(data=cfu_count[ Time==0], size=1.2, colour= "blue", alpha = 0.5, width =1, stroke =0 )+
geom_quasirandom(data=cfu_count,fill = "goldenrod2", height = 0, width = 0.5, size = 1.2, colour="black", alpha=0.5, stroke =0) +
geom_hline(yintercept=50, col="black", linetype = "dashed") +
theme(text=element_text(size=8,  family="Arial"),
panel.background = element_rect(fill = "white", colour = "grey50"),
panel.border = element_rect(colour = "grey", fill=NA, size=1),
axis.text.x = element_text(color = "black", size=8), axis.text.y = element_text(color = "black", size=10),
axis.title.x =element_text(color = "black", size=8), axis.title.y =element_text(color = "black", size=10))+
scale_y_log10(name = "CFUs / Ileum",
breaks = trans_breaks("log10", function(x) 10^x, n = 10),
labels = trans_format("log10", math_format(10^.x)))+
scale_x_continuous(limits = c(0,80), breaks = seq(0, 80, by = 8))+
xlab("Time (h)")+
annotate("text", x=15, y=14, size=2, label= "Colonization Success (%)")+
geom_text(data=cfu_summary, aes(label=paste0(round(Colonization,0),"%"),y=6), size=2)#+
ggplot(cfu_count, aes(x = Time, y = CFU))+
stat_summary(data=cfu_count[Condition!="Inoculum"],fun=mean, geom="line", color = "gray", alpha=0.5, stroke =0)  +
stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="pointrange", color="gray", alpha=0.5 , stroke =0) +
geom_beeswarm(data=cfu_count[ Time==0], size=1.2, colour= "blue", alpha = 0.5, width =1, stroke =0 )+
geom_quasirandom(data=cfu_count,fill = "goldenrod2", height = 0, width = 0.5, size = 1.2, colour="black", alpha=0.5, stroke =0) +
geom_hline(yintercept=50, col="black", linetype = "dashed") +
theme(text=element_text(size=8,  family="Arial"),
panel.background = element_rect(fill = "white", colour = "grey50"),
panel.border = element_rect(colour = "grey", fill=NA, size=1),
axis.text.x = element_text(color = "black", size=8), axis.text.y = element_text(color = "black", size=10),
axis.title.x =element_text(color = "black", size=8), axis.title.y =element_text(color = "black", size=10))+
scale_y_log10(name = "CFUs / Ileum",
breaks = trans_breaks("log10", function(x) 10^x, n = 10),
labels = trans_format("log10", math_format(10^.x)))+
scale_x_continuous(limits = c(0,80), breaks = seq(0, 80, by = 8))+
xlab("Time (h)")+
annotate("text", x=15, y=14, size=2, label= "Colonization Success (%)")+
geom_text(data=cfu_summary, aes(label=paste0(round(Colonization,0),"%"),y=6), size=2)#+
ggsave("Fig.3B.pdf" ,device=cairo_pdf, width=3, height= 2, units = "in", dpi = 300)
### env setup
required_packages = c("dplyr", "data.table", "ggplot2", "readxl", "ggbeeswarm", "ggpubr", "EnvStats", "tidyverse", "patchwork", "ggforce", "wesanderson", "RcolorBrewer", "extrafont", "ggthemes" ,"egg", "officer", "rvg","ggh4x",
"grid")
need_install = required_packages[!(required_packages) %in% installed.packages()]
if (length(need_install) > 0){
install.packages((need_install))
}
# Load packages
lapply(required_packages, require, character.only=T)
dir_script = dirname(rstudioapi::getSourceEditorContext()$path)
setwd(dir_script)
#font_import()
#loadfonts(device="win")
## Load the data
dat= fread("NanoSIMS_data.csv", header = T)
## Needed only if interested in the 13C12C ratio
#dat[, ratio_13c12c:=`13C 12C /12C2`/mean(`13C 12C /12C2`[Label=="12C"]), ] ## Calculate mean of the ratio 1
#dat[, delta_13c12c:=(`13C 12C /12C2`/mean(`13C 12C /12C2`[Label=="12C"])-1)*1000, ] ## Calculate delta permil
## Calculate the ratio by dividing the ratio of labeled and labeled samples (12C)
dat[, ratio_14N13c :=dat$`14N 13C /14N 12C` /dat$`14N 13C /14N 12C`[Label=="12C"], ]
dat$ratio_14N13c
## Calculate delta permil by removing 1 to the ratio and multiplying by 1000
dat[, delta_14N13c:=(`14N 13C /14N 12C`/mean(`14N 13C /14N 12C`[Label=="12C"], na.rm=T)-1)*1000, ]
dat$delta_14N13c
## calculate the percentage of 13C enrichment in 1 sample
dat[, atpercent_14N13c:=100*(`14N 13C`)/(`14N 13C`+`14N 12C`) ]
## Explore the data
min(dat$atpercent_14N13c, na.rm=T)
max(dat$atpercent_14N13c, na.rm=T)
head(dat)
## Subset 12C values only to determine the natural 13C abundance in our samples
dat_12C = dat[Label=="12C"]
## Calulate the mean for 13C12C/12C ratio in 12C samples
dat_12C[, by=.(Tissue), Average_ratio_C := mean(`13C 12C /12C2`, na.rm=T)]
## Unique values for Tissue and avergae ratio
unique(dat_12C[, c("Tissue", "Average_ratio_C")]) ## for wkb2 the ratio seems slightly lower that for host tissues
## calculate the mean of  14N13C/14N12C ration in 12C samples
dat_12C[, by=.(Tissue), Average_ratio_N := mean(`14N 13C /14N 12C`, na.rm=T)]
head(dat_12C)
## Unique values for Tissue and avergae ratio
unique(dat_12C[, c("Tissue", "Average_ratio_N")]) ## similar ratios across the 3 entities
(ggplot(dat_12C, aes(x=dat_12C$Tissue, dat_12C$`14N 13C /14N 12C`))+
geom_quasirandom(width = 0.1)+
theme_light()+
ylab("14N13C/14N12C ratio")+
xlab("Tissue type")+
scale_y_continuous(labels = scales::number_format(accuracy = 0.00001))+
geom_point(stat="summary", fun.y="mean", type=15, colour="red")+
geom_errorbar(width =0.5, stat="summary",
fun.ymin=function(x) {mean(x)-2*sd(x)},
fun.ymax=function(x) {mean(x)+2*sd(x)})+
stat_compare_means(method = "kruskal")+
theme(axis.text.x=element_text(angle=90, hjust=1))+
theme(text=element_text(family="Arial",  size=14))
)
## More variability in bacterial cells compared to the rest
ggsave("standard_ratio_12C_samples.pdf", device=cairo_pdf)
## Overview of the enrichments in the different tissue types
(ggplot(dat, aes(Sample, dat$atpercent_14N13c))+
geom_boxplot()+
ylab("At% 13C")+
labs(colour='Tissue') +
scale_y_continuous(breaks = seq(0, 9, by = 1))+
theme_light()+
ggtitle("13C atomic enrichment")+
scale_fill_manual(values = wes_palette("BottleRocket2"))+
xlab("Sample"))+
theme(axis.text.x=element_text(angle=90, hjust=1))+
theme(text=element_text(size=14,  family="Arial"))+
facet_wrap(~Tissue)
ggsave( "13C_atomic_ernichment_14N13C.pdf", device = cairo_pdf)
install.packages("formatR")
library(formatR)
ggplot(cfu_count, aes(x = Time, y = CFU))+
stat_summary(data=cfu_count[Condition!="Inoculum"],fun=mean, geom="line", color = "gray", alpha=0.5, stroke =0)  +
stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="pointrange", color="gray", alpha=0.5 , stroke =0) +
geom_beeswarm(data=cfu_count[ Time==0], size=1.2, colour= "blue", alpha = 0.5, width =1, stroke =0 )+
geom_quasirandom(data=cfu_count,fill = "goldenrod2", height = 0, width = 0.5, size = 1.2, colour="black", alpha=0.5, stroke =0) +
geom_hline(yintercept=50, col="black", linetype = "dashed") +
theme(text=element_text(size=8,  family="Arial"),
panel.background = element_rect(fill = "white", colour = "grey50"),
panel.border = element_rect(colour = "grey", fill=NA, size=1),
axis.text.x = element_text(color = "black", size=8), axis.text.y = element_text(color = "black", size=10),
axis.title.x =element_text(color = "black", size=8), axis.title.y =element_text(color = "black", size=10))+
scale_y_log10(name = "CFUs / Ileum",
breaks = trans_breaks("log10", function(x) 10^x, n = 10),
labels = trans_format("log10", math_format(10^.x)))+
scale_x_continuous(limits = c(0,80), breaks = seq(0, 80, by = 8))+
xlab("Time (h)")+
annotate("text", x=15, y=14, size=2, label= "Colonization Success (%)")+
geom_text(data=cfu_summary, aes(label=paste0(round(Colonization,0),"%"),y=6), size=2)#+
library(knitr)
hook_output = knit_hooks$get('output')
knit_hooks$set(output = function(x, options) {
# this hook is used only when the linewidth option is not NULL
if (!is.null(n <- options$linewidth)) {
x = knitr:::split_lines(x)
# any lines wider than n should be wrapped
if (any(nchar(x) > n)) x = strwrap(x, width = n)
x = paste(x, collapse = '\n')
}
hook_output(x, options)
})
### env setup
required_packages = c("dplyr", "data.table", "ggplot2", "readxl", "ggbeeswarm", "ggpubr", "EnvStats", "tidyverse", "patchwork", "ggforce", "wesanderson", "RcolorBrewer", "extrafont", "ggthemes" ,"egg", "scales", "ggh4x","grid")
need_install = required_packages[!(required_packages) %in% installed.packages()]
if (length(need_install) > 0){
install.packages((need_install))
}
# Load packages
lapply(required_packages, require, character.only=T)
dir_script = dirname(rstudioapi::getSourceEditorContext()$path)
setwd(dir_script)
#font_import()
#loadfonts(device="win")
cfu_count <- fread("CFU_count.csv") %>%
drop_na() %>%
group_by(Time) %>%
mutate(Time_d = Time / 24,
cfumax = max(CFU),
cfumin = min(CFU),
Colonized = case_when(CFU > 50 ~1,
TRUE ~ 0))
cfu_summary <- cfu_count %>%
group_by(Time) %>%
filter(Gut == "Ileum") %>%
summarise(avg = mean(CFU), stdev = sd(CFU), Colonization = sum(Colonized)/n()*100)
cfu_summary <- cfu_count %>%
group_by(Time) %>%
filter(Gut == "Ileum") %>%
summarise(avg = mean(CFU), stdev = sd(CFU), Colonization = sum(Colonized)/n()*100)
inoculum= cfu_count[cfu_count$Time!= 0, ]
setDT(cfu_count)
ggplot(cfu_count, aes(x = Time, y = CFU))+
stat_summary(data=cfu_count[Condition!="Inoculum"],fun=mean, geom="line", color = "gray", alpha=0.5, stroke =0)  +
stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="pointrange", color="gray", alpha=0.5 , stroke =0) +
geom_beeswarm(data=cfu_count[ Time==0], size=1.2, colour= "blue", alpha = 0.5, width =1, stroke =0 )+
geom_quasirandom(data=cfu_count,fill = "goldenrod2", height = 0, width = 0.5, size = 1.2, colour="black", alpha=0.5, stroke =0) +
geom_hline(yintercept=50, col="black", linetype = "dashed") +
theme(text=element_text(size=8,  family="Arial"),
panel.background = element_rect(fill = "white", colour = "grey50"),
panel.border = element_rect(colour = "grey", fill=NA, size=1),
axis.text.x = element_text(color = "black", size=8), axis.text.y = element_text(color = "black", size=10),
axis.title.x =element_text(color = "black", size=8), axis.title.y =element_text(color = "black", size=10))+
scale_y_log10(name = "CFUs / Ileum",
breaks = trans_breaks("log10", function(x) 10^x, n = 10),
labels = trans_format("log10", math_format(10^.x)))+
scale_x_continuous(limits = c(0,80), breaks = seq(0, 80, by = 8))+
xlab("Time (h)")+
annotate("text", x=15, y=14, size=2, label= "Colonization Success (%)")+
geom_text(data=cfu_summary, aes(label=paste0(round(Colonization,0),"%"),y=6), size=2)#+
#force_panelsizes(rows = unit(1.6, "in"), cols = unit(2.4, "in"))
#ggsave("Fig.3B.pdf" ,device=cairo_pdf, width=3, height= 2, units = "in", dpi = 300)
ggplot(cfu_count, aes(x = Time, y = CFU))+
stat_summary(data=cfu_count[Condition!="Inoculum"],fun=mean, geom="line", color = "gray", alpha=0.5, stroke =0)  +
stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="pointrange", color="gray", alpha=0.5 , stroke =0) +
geom_beeswarm(data=cfu_count[ Time==0], size=1.2, colour= "blue", alpha = 0.5, width =1, stroke =0 )+
geom_quasirandom(data=cfu_count,fill = "goldenrod2", height = 0, width = 0.5, size = 1.2, colour="black", alpha=0.5, stroke =0) +
geom_hline(yintercept=50, col="black", linetype = "dashed") +
theme(text=element_text(size=8,  family="Arial"),
panel.background = element_rect(fill = "white", colour = "grey50"),
panel.border = element_rect(colour = "grey", fill=NA, size=1),
axis.text.x = element_text(color = "black", size=8), axis.text.y = element_text(color = "black", size=10),
axis.title.x =element_text(color = "black", size=8), axis.title.y =element_text(color = "black", size=10))+
scale_y_log10(name = "CFUs / Ileum",
breaks = trans_breaks("log10", function(x) 10^x, n = 10),
labels = trans_format("log10", math_format(10^.x)))+
scale_x_continuous(limits = c(0,80), breaks = seq(0, 80, by = 8))+
xlab("Time (h)")+
annotate("text", x=15, y=14, size=2, label= "Colonization Success (%)")+
geom_text(data=cfu_summary, aes(label=paste0(round(Colonization,0),"%"),y=6), size=2)#+
#force_panelsizes(rows = unit(1.6, "in"), cols = unit(2.4, "in"))
#ggsave("Fig.3B.pdf" ,device=cairo_pdf, width=3, height= 2, units = "in", dpi = 300)
